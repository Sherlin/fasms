{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/applicants": {
            "get": {
                "description": "Retrieve all applicants with their dependents",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applicants"
                ],
                "summary": "Get detailed list of applicants",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Applicant"
                            }
                        }
                    },
                    "404": {
                        "description": "Applicants not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new applicant to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applicants"
                ],
                "summary": "Create a new applicant",
                "parameters": [
                    {
                        "description": "Applicant data",
                        "name": "applicant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Applicant"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Applicant"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Insertion error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/applicants/{id}": {
            "get": {
                "description": "Retrieve an applicant by their unique ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applicants"
                ],
                "summary": "Get applicant by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Applicant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Applicant"
                        }
                    },
                    "404": {
                        "description": "Applicant not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Update the details of an existing applicant",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applicants"
                ],
                "summary": "Update an applicant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Applicant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated applicant data",
                        "name": "applicant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Applicant"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Applicant"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Applicant not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an applicant by their unique ID",
                "tags": [
                    "applicants"
                ],
                "summary": "Delete an applicant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Applicant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Applicant not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/applications": {
            "get": {
                "description": "Retrieve all applications from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Get all applications",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Application"
                            }
                        }
                    },
                    "500": {
                        "description": "Applications not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new application to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Create a new application",
                "parameters": [
                    {
                        "description": "Application data",
                        "name": "application",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Application"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Application"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Insertion error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/applications/{id}": {
            "put": {
                "description": "Update the details of an existing application",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "applications"
                ],
                "summary": "Update an application",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated application data",
                        "name": "application",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Application"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Application"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Application not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an application by its unique ID",
                "tags": [
                    "applications"
                ],
                "summary": "Delete an application",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Application ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Application not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/schemes": {
            "get": {
                "description": "Retrieve all schemes with benefits",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemes"
                ],
                "summary": "Get all schemes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Scheme"
                            }
                        }
                    },
                    "500": {
                        "description": "Schemes not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new scheme and store it in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemes"
                ],
                "summary": "Create a new scheme",
                "parameters": [
                    {
                        "description": "Scheme",
                        "name": "scheme",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Scheme"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Scheme"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Insertion error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/schemes/eligible": {
            "get": {
                "description": "Retrieve schemes for a specific applicant based on their employment status and number of school-going kids",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemes"
                ],
                "summary": "Get schemes for an applicant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Applicant ID",
                        "name": "applicant",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Applicant"
                        }
                    },
                    "404": {
                        "description": "Applicant not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Schemes not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/schemes/{id}": {
            "put": {
                "description": "Update the scheme details by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schemes"
                ],
                "summary": "Update an existing scheme",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scheme ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Scheme",
                        "name": "scheme",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Scheme"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Scheme"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Scheme not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an existing scheme by its ID",
                "tags": [
                    "schemes"
                ],
                "summary": "Delete a scheme by its ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Scheme ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Scheme not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check the health of the server",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.HealthResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.HealthResponse": {
            "type": "object",
            "properties": {
                "go": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Applicant": {
            "type": "object",
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "dependents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Dependent"
                    }
                },
                "eligible_schemes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Scheme"
                    }
                },
                "employment_status": {
                    "type": "string"
                },
                "household": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nric": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                }
            }
        },
        "models.Application": {
            "type": "object",
            "properties": {
                "applicant_id": {
                    "type": "string"
                },
                "date_of_application": {
                    "type": "string"
                },
                "disbursed": {
                    "type": "string"
                },
                "disbursed_date": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "scheme_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Benefit": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "scheme_id": {
                    "type": "string"
                }
            }
        },
        "models.Dependent": {
            "type": "object",
            "properties": {
                "date_of_birth": {
                    "type": "string"
                },
                "employment_status": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parent_id": {
                    "type": "string"
                },
                "relation": {
                    "type": "string"
                },
                "sex": {
                    "type": "string"
                }
            }
        },
        "models.Scheme": {
            "type": "object",
            "properties": {
                "benefits": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Benefit"
                    }
                },
                "criteria": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}